; This file is used to provide cbsdk with parameters needed
; to properly invoke the sdkd implementation. It is expected
; that this configuration file be provided as an argument (i.e. -C)
; to the sdk runner, which shall invoke the appropriate commands.

[global]
; This option specifies the default invocation section to use.
; this is handy in case there are different types of sdkd configurations
; which all eventually share common data.
default_config = multi

; The capabilities of the SDKD implementation are listed here.
; The bootstrapping/negotiation process is not done within
; the protocol (because there really isn't [yet] an _actual_
; remote client/server architecture, it is sufficient to list them
; here. Only true values need to be listed here, but I have decided
; to enumerate some for completeness
[caps]

; Set to true if this sdkd supports sharing datasets among its handles
ds_shared = 1

; Whether this sdkd needs/supports the preamble-style NEWHANDLE command
; (Since the C++ sdkd uses pthreads, it uses shared data to know which
; handle is associated with which socket/id)
preamble = 0

; Whether this sdkd supports premature cancellation of running requests.
cancel = 1

; This is one of many sections which explain a specific instance of
; the sdkd configuration.
[multi]

; The executable to invoke. This should be formatted as a Python list
exe = [ "cplusplus/sdkd_lcb",
        "infofile=portinfo.txt" ]

; The Driver implementation to use (DriverStdio or DriverInet)
driver = DriverInet

; Extra driver options to be passed to the driver's constructor
driver_options = { 'portinfo' : 'portinfo.txt' }
