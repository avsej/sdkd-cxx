#!/usr/bin/env python
import sys
import argparse
import logging
import logging.config

sys.path.insert(0, "lib")

import cbsdk
import cbsdk.constants
import cbsdk.driver
import cbsdk.dataset


parser = argparse.ArgumentParser(description = "Couchbase SDK Driver")

parser.add_argument('-d', '--debug' , action = 'store_true',
                    help = "Enable debugging")

parser.add_argument('-H', '--hostname', type = str, default = "localhost",
                    help = "Hostname to use")

parser.add_argument('-P', '--port', type = int, default = 8091,
                    help = "Port")

parser.add_argument('-b', '--bucket', type = str, default = 'default',
                    help = 'Couchbase bucket to use')

parser.add_argument('-u', '--username', type = str, default = "",
                    help = "Username")

parser.add_argument( '-p', '--password', type = str, default = "",
                    help = 'password')

parser.add_argument( '-c', '--count', type = int, default = 100,
                    help = "Number of iterations")

parser.add_argument('-t', '--key-lifetime', type = int, default = 300,
                    dest = 'expiry',
                    help = "Expiration for kv pairs")

parser.add_argument('--simple', action = 'store_true', default = False,
                    help = "Do simple run")

parser.add_argument('--batched', action = 'store_true', default = False,
                    help = "Do batched run")

parser.add_argument('-D', '--delay', default = 0,
                    help = "Delay (in msec) between each iteration (for batched)")

parser.add_argument('-M', '--multi', default = 0, type = int,
                    help = "Use this many concurrent handles")

args = parser.parse_args()


loghandler = logging.StreamHandler()
formatter = logging.Formatter(fmt =
                              "[%(name)s %(filename)s:%(lineno)s] %(message)s")

loghandler.setFormatter(formatter)

logging.getLogger().addHandler(loghandler)

log = logging.getLogger()

if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)


driverclass = None
classopts = {}
cmdline = ["/usr/bin/perl", "-MCarp::Always", "sdkbin/sdkd_perl"]

if args.multi:
    driverclass = cbsdk.driver.DriverInet
    classopts.update( { "portinfo" : "portinfo.txt" } )
    cmdline += ["--mode=mp", "--infofile=portinfo.txt"]
    
else:
    driverclass = cbsdk.driver.DriverStdio

driver = driverclass(cmdline, **classopts)


itermax = args.count

handle_args = {
    'bucket' : args.bucket,
    'username' : args.username,
    'password' : args.password,
    'host' : args.hostname,
    'port' : args.port
}


if args.simple:
    handle = driver.create_handle(**handle_args)
    
    # build key set:
    keys = []
    for x in xrange(0, itermax):
        base = "KEY_%d" % (x)
        keys.append( base )
        
    log.info("Doing simple iterations..")
    log.info("Doing pre-deletion..")
    
    [ handle.invoke_command(
        handle.delete_simple("KEY_" + str(x))) for x in keys
     ]
    
    for k in keys:
        rv = handle.invoke_command(
            handle.set_simple(k, k,Expiry = args.expiry))
        
        assert rv.is_ok()
        
    for k in keys:
        rv = handle.invoke_command(handle.get_simple(k))
        assert rv.is_ok()
        assert rv.value() == k
    
    driver.destroy_handle(handle)


if args.batched:
    log.info("Will do dataset operations..")
        
    ds = cbsdk.dataset.DSSeed(itermax,
                              kseed = "Key__",
                              vseed = "Value__",
                              repeat = "MYREP")
    
    log.info("Defined dataset..")
    
    handle = driver.create_handle(**handle_args)
    
    log.info("Deleting Keys...")
    rv = handle.invoke_command(
        handle.ds_keyop(ds,
                        cbsdk.constants.KOP_DELETE))
    log.debug(rv)
    
    driver.destroy_handle(handle)
    handle = None
    handles = []
    
    handle_count = args.multi if args.multi > 0 else 1
    log.debug("Will spawn handles " + str(handle_count))
    
    for i in xrange(1, handle_count):
        handle = driver.create_handle(**handle_args)
        handles.append(handle)
    
    
    for handle in handles:    
        rv = handle.invoke_command(
            handle.ds_mutate(ds,
                             Expiry = args.expiry,
                             DelayMsec = args.delay),
            wait = False)
        log.debug(rv)
    
    for handle in handles:
        resp = handle.conduit.recv_msg()
        log.debug(resp)
        
    for handle in handles:        
        rv = handle.invoke_command(
            handle.ds_retrieve(ds,
                               DelayMsec = args.delay),
            wait = False)
        log.debug(rv)
    
    for handle in handles:
        resp = handle.conduit.recv_msg()
        log.debug(resp)