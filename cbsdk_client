#!/usr/bin/env python
import sys
import argparse
import logging
import logging.config

sys.path.insert(0, "lib")

import cbsdk
import cbsdk.constants
import cbsdk.driver
import cbsdk.dataset

from cbsdk.driverconfig import DriverFactory


parser = argparse.ArgumentParser(description = "Couchbase SDK Driver")

parser.add_argument('-d', '--debug' , action = 'store_true',
                    help = "Enable debugging")

parser.add_argument('-H', '--hostname', type = str, default = "localhost",
                    help = "Hostname to use")

parser.add_argument('-P', '--port', type = int, default = 8091,
                    help = "Port")

parser.add_argument('-b', '--bucket', type = str, default = 'default',
                    help = 'Couchbase bucket to use')

parser.add_argument('-u', '--username', type = str, default = "",
                    help = "Username")

parser.add_argument( '-p', '--password', type = str, default = "",
                    help = 'password')

parser.add_argument( '-c', '--count', type = int, default = 100,
                    help = "Number of iterations")

parser.add_argument('-t', '--key-lifetime', type = int, default = 300,
                    dest = 'expiry',
                    help = "Expiration for kv pairs")

parser.add_argument('--simple', action = 'store_true', default = False,
                    help = "Do simple run")

parser.add_argument('--batched', action = 'store_true', default = False,
                    help = "Do batched run")

parser.add_argument('-D', '--delay', default = 0, type = int,
                    help = "Delay (in msec) between each iteration (for batched)")

parser.add_argument('-M', '--multi', default = 0, type = int,
                    help = "Use this many concurrent handles")

parser.add_argument('-C', '--config', default = "conf/perl.cfg", type = str,
                    help = "Configuration file to use")

parser.add_argument('-S', '--section', type = str,
                    help = "Section to use within configuration")

parser.add_argument('-X', '--debugger', type = str,
                    help = 'Spawn sdkd with this prepended to the command line'),

parser.add_argument('-I', '--iterwait', action = 'store_true',
                    help = "Do not batch (i.e. no mget)")

parser.add_argument('-E', '--extra-args', dest = 'extra_args', type = str,
                    help = "Extra sdkd args")

parser.add_argument('--ksize', default = 24, type = int,
                    help = "Default key size")

parser.add_argument('--vsize', default = 512, type = int,
                    help = "Default value size")

args = parser.parse_args()

factory = DriverFactory(args.config,
                        section = args.section,
                        extra_args = args.extra_args,
                        debugger = args.debugger)


loghandler = logging.StreamHandler()
formatter = logging.Formatter(fmt =
                              "[%(name)s %(filename)s:%(lineno)s] %(message)s")

loghandler.setFormatter(formatter)

logging.getLogger().addHandler(loghandler)

log = logging.getLogger()



if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)
else:
    logging.getLogger().setLevel(logging.INFO)

driver = factory.create_driver()


itermax = args.count

handle_args = {
    'bucket' : args.bucket,
    'username' : args.username,
    'password' : args.password,
    'host' : args.hostname,
    'port' : args.port
}


# Define a dataset
if args.simple:
    dsargs = {}
    for x in xrange(0, itermax):
        k = "KEY_INL_"
        while len(k) < args.ksize:
            k += "REP" + str(x)
        
        v = "VALUE_INL_"
        while len(v) < args.vsize:
            v += "REP" + str(x)
        
        dsargs[k] = v
        
    ds = cbsdk.dataset.DSInline(dsargs)
else:
    ds = cbsdk.dataset.DSSeed(itermax,
                               kseed = "Key__SEED_",
                               ksize = args.ksize,
                               vseed = "Value__SEED_",
                               vsize = args.vsize,
                               repeat = "MYREP")

statistics = {}
operargs = {}
if args.iterwait:
    operargs["IterWait"] = 1


handle = driver.create_handle(**handle_args)

log.debug("Deleting Keys...")
rv = handle.invoke_command(
    handle.ds_keyop(ds,
                    cbsdk.constants.KOP_DELETE,
                    IterWait = 1))
log.debug(rv)


driver.destroy_handle(handle)

handle = None
handles = []

handle_count = args.multi if args.multi > 0 else 1
log.debug("Will spawn %d handles ", handle_count)

for i in xrange(0, handle_count):
    handle = driver.create_handle(**handle_args)
    handles.append(handle)


for handle in handles:    
    rv = handle.invoke_command(
        handle.ds_mutate(ds,
                         Expiry = args.expiry,
                         DelayMsec = args.delay,
                         **operargs),
        wait = False)
        
statistics['SET'] = {}
statistics['GET'] = {}

for handle in handles:
    resp = handle.conduit.recv_msg()
    
    getstats = statistics['SET']
    for k,v in resp.summary().items():
        if not getstats.has_key(k):
            getstats[k] = 0
            
        getstats[k] += v
    
    log.debug(resp)

for handle in reversed(handles):
    rv = handle.invoke_command(
        handle.ds_retrieve(ds,
                           DelayMsec = args.delay,
                           **operargs),
        wait = False)
    
for handle in handles:
    resp = handle.conduit.recv_msg()
    
    setstats = statistics['GET']
    for k,v in resp.summary().items():
        
        if not setstats.has_key(k):
            setstats[k] = 0
        setstats[k] += v
            
    log.debug(resp)


for handle in handles:
    driver.destroy_handle(handle)

driver.close()

print statistics