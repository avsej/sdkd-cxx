#!/usr/bin/env python
import sys
import argparse
import logging
import logging.config

sys.path.insert(0, "lib")

import cbsdk
import cbsdk.message

from cbsdk.driver import SDKDriverStdio

parser = argparse.ArgumentParser(description = "Couchbase SDK Driver")

parser.add_argument(
    '-d', '--debug' ,
    action = 'store_true',
    help = "Enable debugging")

parser.add_argument(
    '-H', '--hostname',
    type = str,
    default = "localhost",
    help = "Hostname to use"
)

parser.add_argument(
    '-P', '--port',
    type = int,
    default = 8091,
    help = "Port"
)

parser.add_argument(
    '-b', '--bucket',
    type = str,
    default = 'default',
    help = 'Couchbase bucket to use'
)

parser.add_argument(
    '-u', '--username',
    type = str,
    default = "",
    help = "Username"
)

parser.add_argument(
    '-p', '--password',
    type = str,
    default = "",
    help = 'password'
)

parser.add_argument(
    '-c', '--count',
    type = int,
    default = 100,
    help = "Number of iterations"
)


args = parser.parse_args()


loghandler = logging.StreamHandler()
formatter = logging.Formatter(fmt =
                              "[%(name)s %(filename)s:%(lineno)s] %(message)s")

loghandler.setFormatter(formatter)

logging.getLogger().addHandler(loghandler)

if args.debug:
    logging.getLogger().setLevel(logging.DEBUG)

driver = SDKDriverStdio(["/usr/bin/perl",
                         "-MCarp::Always",
                         "sdkbin/sdkd_perl"])

handle = driver.create_handle(bucket = args.bucket,
                              username = args.username,
                              password = args.password,
                              host = args.hostname,
                              port = args.port)

itermax = args.count



print "Doing simple iterations.."
for x in xrange(1, itermax):
    k = "KEY_%d" % (x)
    rv = handle.set_simple(k, k)
    assert(rv.is_ok())
    
for x in xrange(1, itermax):
    k = "KEY_%d" % (x)
    rv = handle.get_simple(k)
    assert(rv.is_ok())
    assert rv.value() == k
    
print "Will do dataset operations.."

dsid = "SimpleKV"
kvset = {}
for x in xrange(0, itermax):
    base = "TMPKV_%d" % (x)
    kvset[base] = str(reversed(base))


dsop = driver.create_dataset(dsid,
                             kvset)

assert(dsop.is_ok())

print "Defined dataset!"