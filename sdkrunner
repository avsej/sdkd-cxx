#!/usr/bin/env python
import sys
import optparse
import os.path
import warnings

sys.path.append('lib')
from cbsdk.depstrap import bootstrapTestrunnerLibs

# Define a generic somewhat-compatible list of options
optdefs = (
    ('-i', '--ini', {
        "dest" : "ini",
        "help" : "Path to .ini containing cluster information"
    }, { "required" : True } ),
    
    ('-C', '--cbsdk-config', {
        "help" : "Path to SDK Driver implementation config",
        "dest" : "cbsdk_config"
    }),
    
    ('-d', '--debug', {
        "help" : "Enable debugging",
        "dest" : "debug",
        "action" : "store_true",
    }),
    ('-L', '--libpath', {
        "dest" : "testrunner_lib",
        "help" : "Base path to testrunner libraries",
        "default" : "../testrunner"
    }),
    ("-t", "--test", {
        "dest" : "tests",
        "help" : "which tests to run (may be specified multiple times)",
        "action" : "append",
        "default" : []
    }),
    ("-X", "--sdkd-debugger", {
        "dest" : "sdkd_debugger",
        "help" : "wrap sdkd implementation withi this debugger"
    }),
    ("-E", "--sdkd-cliextra", {
        "dest" : "sdkd_cliextra",
        "help" : "append to the sdkd invocation"
    })
)

parser = optparse.OptionParser(description = "Couchbase SDK Runner")
[parser.add_option(*o[0:2], **o[2]) for o in optdefs]
options = parser.parse_args()[0]

if not options.cbsdk_config:
    sys.stderr.write("Must have SDKD configuration\n")
    sys.exit(1)
    
if not options.tests:
    warnings.warn("No tests specified..")

bootstrapTestrunnerLibs(options.testrunner_lib)
import logging
import logging.config

import cbsdk.driver
from cbsdk.driverconfig import DriverFactory

from xunit import XUnitTestResult
import unittest
import time
import logger

from couchbase.cluster import Cluster
from TestInput import TestInputParser, TestInputSingleton
from sdk.sdkbasetestcase import SDKBaseTestCase

loghandler = logging.StreamHandler()
formatter = logging.Formatter(
    fmt = "[%(name)s %(filename)s:%(lineno)s] %(message)s")

loghandler.setFormatter(formatter)
logging.getLogger().addHandler(loghandler)
log = logging.getLogger()


if not options.ini:
    sys.stderr.write("Must have --ini file for cluster config\n")
    sys.exit(1)

tinput = TestInputParser.parse_from_file(options.ini)
TestInputSingleton.input = tinput

if options.debug:
    logger.Logger.get_logger().setLevel(logger.logging.DEBUG)

factory = DriverFactory(options.cbsdk_config,
                        extra_args = options.sdkd_cliextra,
                        debugger = options.sdkd_debugger)

SDKBaseTestCase.setDriverFactory(factory)
TestInputSingleton.input.test_params = { "items" : 0 }

xunit = XUnitTestResult()
for name in options.tests:
    
    suite = unittest.TestLoader().loadTestsFromName(name)
    result = unittest.TextTestRunner(verbosity=2).run(suite)